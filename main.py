#–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
print('–ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from app import keyboards as kb
from app.database import database_callcenter as db
from app.database import quiz_add_data as qad
from app.database import report_creator as rc
from dotenv import load_dotenv
import os
print('–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
storage = MemoryStorage()
load_dotenv()
bot = Bot(os.getenv('SSSH'))
dp = Dispatcher(bot=bot, storage=storage)

class NewQuiz(StatesGroup):
    gender = State()
    class_out = State()
    hw_time = State()
    general_ill = State()
    bbone_ill = State()
    neck_ill = State()
    vascular_ill = State()
    walk = State()
    hobby = State()
    plus = State()



#–ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def on_startup(_):
    await db.db_start()

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–∑ —Ñ–∞–π–ª–∞ keyboards.py
#–ú–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    global tg_id
    tg_id = message.from_user.id
    await db.cmd_start_db(tg_id)
    await message.delete()
    if tg_id == int(os.getenv('ADMIN_ID1')) or int(os.getenv('ADMIN_ID2')):
        #await message.answer_sticker('CAACAgIAAxkBAAM_ZlnKV1TRjfXnZL7aLqYa1rYtvlYAAh4JAAIYQu4I-VjZ7h0hnCE1BA')
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É, –ø–æ –∫–Ω–æ–ø–∫–µ \n‚úç –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n–°–ª–µ–¥—É—â–∏–º —à–∞–≥–æ–º, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è \nüìä –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç',
                             reply_markup=kb.main)
    else:
        #await message.answer_sticker('CAACAgIAAxkBAAM9ZlnKScRhbG9VrNGrjKG1Qs01sS0AAjgLAAJO5JlLMrFH0tlPjNA1BA')
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É, –ø–æ –∫–Ω–æ–ø–∫–µ \n‚úç –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n–°–ª–µ–¥—É—â–∏–º —à–∞–≥–æ–º, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è \nüìä –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç',
                         reply_markup=kb.main)

@dp.message_handler(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def cmd_start(message: types.Message):
    global tg_id
    tg_id = message.from_user.id
    await db.cmd_start_db(tg_id)
    await message.delete()
    if tg_id == 947879887 or int(os.getenv('ADMIN_ID2')):
        await message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                             reply_markup=kb.include_admin)
    else:
        await message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                         reply_markup=kb.include)
#–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(text='‚úç –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
async def add_answer(message: types.Message, state: FSMContext):
    if await qad.checkout(message.from_user.id) == False:
        await bot.forward_message(os.getenv('CHAT_CONFIG'), message.from_user.id, message.message_id)
        await NewQuiz.gender.set()
        await message.delete()
        async with state.proxy() as data:
            data['unload'] = None
        await message.answer('1Ô∏è‚É£ | –¢–≤–æ–π –ø–æ–ª', reply_markup=kb.gender_kb)
    else:
        await message.answer('‚ö†Ô∏è | –¢—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª –∞–Ω–∫–µ–Ω—Ç—É. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç?', reply_markup=kb.prove1by1)

@dp.message_handler(text='‚úç –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç')
async def add_answer(message: types.Message, state: FSMContext):
        await bot.forward_message(os.getenv('CHAT_CONFIG'), message.from_user.id, message.message_id)
        await qad.del_str(message.from_user.id)
        await NewQuiz.gender.set()
        async with state.proxy() as data:
            data['unload'] = None
            data['unload'] = "Y"
        await message.answer('1Ô∏è‚É£ | –¢–≤–æ–π –ø–æ–ª', reply_markup=kb.gender_kb)

@dp.message_handler(text='üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
async def add_answer(message: types.Message, state: FSMContext):
        await bot.forward_message(os.getenv('CHAT_CONFIG'), message.from_user.id, message.message_id)
        await qad.del_str(message.from_user.id)
        await message.answer(f'–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!',
                             reply_markup=kb.main)

@dp.message_handler(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def cmd_start(message: types.Message):
    await message.delete()
    if tg_id == int(os.getenv('ADMIN_ID1')) or int(os.getenv('ADMIN_ID2')):
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É, –ø–æ –∫–Ω–æ–ø–∫–µ \n‚úç –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n–°–ª–µ–¥—É—â–∏–º —à–∞–≥–æ–º, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è \nüìä –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç',
                             reply_markup=kb.main)
    else:
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É, –ø–æ –∫–Ω–æ–ø–∫–µ \n‚úç –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n–°–ª–µ–¥—É—â–∏–º —à–∞–≥–æ–º, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è \nüìä –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç',
                         reply_markup=kb.main)

@dp.callback_query_handler(state=NewQuiz.gender)
async def add_gender(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = call.data
    await call.message.delete()
    await call.message.answer('2Ô∏è‚É£ | –ö–∞–∫–æ–π –∫–ª–∞—Å—Å —Ç—ã –æ–∫–æ–Ω—á–∏–ª(–∞)?\n(2023-2024–≥)', reply_markup=kb.class_out_kb)
    await state.set_state(NewQuiz.class_out.state)

@dp.callback_query_handler(state=NewQuiz.class_out)
async def add_class_out(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['class_out'] = call.data
    await call.message.delete()
    await call.message.answer('3Ô∏è‚É£ | –ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–æ–¥–∏–º–æ–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–∑/–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –ª–µ–∫—Ü–∏–π —É —Ç–µ–±—è –∑–∞–Ω–∏–º–∞–µ—Ç –≤ –¥–µ–Ω—å?\n(–≤—ã—à–µ —à–∫–æ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è)', reply_markup=kb.hw_time_kb)
    await state.set_state(NewQuiz.hw_time.state)

@dp.callback_query_handler(state=NewQuiz.hw_time)
async def add_hw_time(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['hw_time'] = call.data
        data['general_ill'] = None
    await call.message.delete()
    await call.message.answer('4Ô∏è‚É£ | –ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —á–∞—Å—Ç–æ—Ç–∞ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏?\n(–°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—É–¥–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –æ–±–æ—Å—Ç—Ä–µ–Ω–∏–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ –¥—Ä)', reply_markup=kb.general_ill_time_kb)
    await state.set_state(NewQuiz.general_ill.state)

@dp.callback_query_handler(state=NewQuiz.general_ill)
async def add_general_ill(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['general_ill'] = call.data
        data['bbone_ill'] = None
    await call.message.delete()
    await call.message.answer('5Ô∏è‚É£ | –ò–º–µ–µ—Ç—Å—è –ª–∏ –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫—Ä–∏–≤–ª–µ–Ω–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞?\n(–ï—Å–ª–∏ –¥–∞, —Ç–æ —Å—Ç–µ–ø–µ–Ω—å –∏—Å–∫—Ä–∏–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç—ã –æ–±—Å–ª–µ–¥–æ–≤–∞–ª—Å—è(–∞—Å—å) —É –≤—Ä–∞—á–∞)', reply_markup=kb.bbone_ill_kb)
    await state.set_state(NewQuiz.bbone_ill.state)

@dp.callback_query_handler(state=NewQuiz.bbone_ill)
async def add_bbone_ill(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['bbone_ill'] = call.data
        data['neck_ill'] = None
    await call.message.delete()
    await call.message.answer('6Ô∏è‚É£ | –ò–º–µ–µ—Ç—Å—è –ª–∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —à–µ–π–Ω—ã–º –æ—Ç–¥–µ–ª–æ–º?\n(–ï—Å–ª–∏ –¥–∞, –∫–∞–∫ —á–∞—Å—Ç–æ —à–µ—è –±–æ–ª–∏—Ç/–æ—â—É—â–∞–µ—Ç—Å—è –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç)', reply_markup=kb.neck_ill_kb)
    await state.set_state(NewQuiz.neck_ill.state)

@dp.callback_query_handler(state=NewQuiz.neck_ill)
async def add_neck_ill(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if call.data != 'skip':
            data['neck_ill'] = call.data
        data['vascular_ill'] = None
    await call.message.delete()
    await call.message.answer('7Ô∏è‚É£ | –ò–º–µ–µ—Ç—Å—è –ª–∏ –Ω–∞–ª–∏—á–∏–µ –≤–µ–≥–µ—Ç–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π?', reply_markup=kb.vascular_ill_kb)
    await state.set_state(NewQuiz.vascular_ill.state)

@dp.callback_query_handler(state=NewQuiz.vascular_ill)
async def add_vascular_ill(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if call.data != 'skip':
            data['vascular_ill'] = call.data
        data['walk'] = None
    await call.message.delete()
    await call.message.answer('8Ô∏è‚É£ | –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –≥—É–ª—è–µ—à—å?', reply_markup=kb.walk_kb)
    await state.set_state(NewQuiz.walk.state)

@dp.callback_query_handler(state=NewQuiz.walk)
async def add_walk(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if call.data != 'skip':
            data['walk'] = call.data
        data['hobby'] = None
    await call.message.delete()
    await call.message.answer('9Ô∏è‚É£ | –ò–º–µ–µ—Ç—Å—è –ª–∏ —É —Ç–µ–±—è —Ö–æ–±–±–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ —Å–ø–æ—Ä—Ç–æ–º?', reply_markup=kb.hobby_kb)
    await state.set_state(NewQuiz.hobby.state)

@dp.callback_query_handler(state=NewQuiz.hobby)
async def add_hobby(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if call.data != 'skip':
            data['hobby'] = call.data
    await qad.quiz_add_data(state, tg_id)
    await state.finish()
    await call.message.delete()
    if call.message.from_user.id == int(os.getenv('ADMIN_ID1')) or int(os.getenv('ADMIN_ID2')):
            await call.message.answer(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!',
                                 reply_markup=kb.main)
    else:
            await call.message.answer(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!',
                                 reply_markup=kb.main)
@dp.message_handler(text='üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç')
async def report(message: types.Message):
    so_extract = await rc.report_call(message.from_user.id)
    class_out_begin = await rc.report_callin(so_extract)
    await message.answer(f'{message.from_user.first_name}, –¥–ª—è —Ç–µ–±—è –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –±—ã–ª —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç.\n\n–ü—Ä–µ–¥–ø–æ–ª–æ–≥–∞–µ–º—ã–π –∫–ª–∞—Å—Å: {class_out_begin}\n'
                         f'–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∑–Ω–∞—á–∏—Ç—Å—è –∏—Å–∫—Ä–∏–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞ 1 —Å—Ç–µ–ø–µ–Ω–∏ –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å —à–µ–π–Ω—ã–º –æ—Ç–¥–µ–ª–æ–º (—á–∞—â–µ –∏–∑-–∑–∞ –¥–æ–ª–≥–æ–π –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—á–∞—â–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ –∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º.')
@dp.message_handler(text='‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è')
async def contacts(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID1')) or int(os.getenv('ADMIN_ID2')):
        await bot.forward_message(os.getenv('CHAT_CONFIG'), message.from_user.id, message.message_id)
        await message.answer(f'panel has open',
                             reply_markup=kb.sys_main)
    else:
        await message.reply('–û—É! –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.')
@dp.message_handler()
async def answer(message: types.Message):
   await message.reply('–û—É! –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start')

#–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! https://t.me/AnthroDataBot')
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)

